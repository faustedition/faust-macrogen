plugins {
    id "base"
/*    id "com.jetbrains.python.envs" version "0.0.30" */
}

if (project != rootProject) {
	project.buildDir = rootProject.buildDir
	logger.info("Using root project's buildDir: $buildDir")
}

if (!project.hasProperty('dataDir')) {
	def dataDirCandidate = rootProject.file('data/xml')
	if (dataDirCandidate.isDirectory())
		project.ext.dataDir = dataDirCandidate
	else {
		throw new FileNotFoundException("Data directory not found. Either put data into $dataDirCandidate, or set the dataDir property.")
	}
	logger.info("Using data from $dataDirCandidate")
}
	project.ext.venv = "$buildDir/envs/macrogen"

repositories {
    ivy {
        url "https://repo.anaconda.com/miniconda/"
        patternLayout { artifact "[module]-[revision]-Linux-x86_64.sh" }
        metadataSources { artifact() }
        content { includeGroup "miniconda" }
    }
}

configurations {
    python
}

dependencies {
    python group: 'miniconda', name: 'Miniconda3', version: 'py39_4.9.2'
}

/*
envs {
	bootstrapDirectory = new File(buildDir, 'tools')
	envsDirectory = new File(buildDir, 'envs')

	// python "python37", "3.7.4", []
        conda "Miniconda3", "Miniconda3-py39_4.9.2", "64", []
	// virtualenv "macrogen", "python37"
        condaenv "macrogen", "3.9", "Miniconda3", [condaPackage("graphviz")]
	project.ext.venv = "$buildDir/envs/macrogen"
}
*/

task prepareMacrogenOptions {
    project.ext.macrogenArgs = []
	project.ext.macrogenInputs = []
	project.ext.macrogenExecutable = "$venv/bin/macrogen"
        project.ext.macrogenPath = "$venv/bin"

	if (project.hasProperty('macrogenOptions'))
		macrogenArgs.add(project.macrogenOptions)

	if (project.rootProject != project) {
		// project.macrogenArgs.add("--sigils=$buildDir/sigils.json")
		// project.macrogenInputs.add("$buildDir/sigils.json")
		project.macrogenArgs.add("--paralipomena=$buildDir/www/data/paralipomena.js")
		project.macrogenInputs.add("$buildDir/www/data/paralipomena.js")
		logger.info("Setup macrogen to use pregenerated data from $buildDir")
		project.ext.macrogen_reports = "$buildDir/www/macrogenesis"
	} else {
	    project.ext.macrogen_reports = "$buildDir/macrogenesis"
	}
	project.macrogenArgs.add("--data=$dataDir")
	project.macrogenInputs.add("$dataDir/macrogen")
	project.macrogenArgs.add("--report-dir=$macrogen_reports")
	project.macrogenArgs.add('--progressbar=false')
}


task installMacrogen(type: Exec) {
	description 'Installs the macrogenesis tool and its requirements'
	group 'macrogen'
	dependsOn 'build_envs'

	executable "$venv/bin/pip"
	workingDir projectDir
	args "install", "-U", "."

    inputs.file "pyproject.toml"
	outputs.file "$venv/bin/macrogen"
}

task installAnaconda(type: Exec) {
    File installer = configurations.python.getSingleFile()
    executable "/bin/bash"
    args installer, "-b", "-p", "$buildDir/tools/miniconda"
    outputs.dir("$buildDir/tools/miniconda")
}

task runMacrogenComplete {
	description 'Runs the complete macrogenesis analysis and configuration'
	dependsOn installMacrogen, prepareMacrogenOptions
	doLast {
		project.exec {
                        environment 'PATH', macrogenPath
			executable macrogenExecutable
			args macrogenArgs
			inputs.files(project.macrogenInputs)
		}
	}
}

task runMacrogenAnalysis {
	description 'Runs the macrogenesis analysis phase'
    group 'macrogen'
	dependsOn installMacrogen
	dependsOn prepareMacrogenOptions
	inputs.files(project.macrogenInputs)
	doLast {
		project.exec {
                        environment 'PATH', macrogenPath
			executable macrogenExecutable
			args macrogenArgs
			args "--skip-reports"
			args "-o", "$buildDir/macrogen-graphs.zip"
			args "--order", "$buildDir/order.xml"
		}
	}
	outputs.file "$buildDir/macrogen-graphs.zip"
	outputs.file "$buildDir/order.xml"
}

task runMacrogenReporting {
	description 'Runs the macrogenesis reporting phase'
	group 'macrogen'
	dependsOn installMacrogen
	dependsOn prepareMacrogenOptions
	dependsOn runMacrogenAnalysis
	inputs.files(project.macrogenInputs)
	doLast {
		project.exec {
                        environment 'PATH', macrogenPath
			args "-i", "$buildDir/macrogen-graphs.zip"
                        args macrogenArgs
			executable macrogenExecutable
		}
		project.copy {
			into "$buildDir/www/data"
			from "$macrogen_reports"
			include "witness-stats.json"
		}
	}
	inputs.file("$buildDir/macrogen-graphs.zip")
	outputs.dir("$macrogen_reports")
}

assemble.dependsOn(runMacrogenReporting)
